// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace ReqnrollPlaywright.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class LoginFeatureFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Login feature", "  As a user of OrangeHRM system\r\n  I want to be able to login to the application\r" +
                "\n  So that I can access the HR management features", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "OrangeLogin.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Io.Cucumber.Messages.Types.Source SourceFunc()
        {
            return new global::Io.Cucumber.Messages.Types.Source("Features/OrangeLogin.feature", @"Feature:Login feature
  As a user of OrangeHRM system
  I want to be able to login to the application
  So that I can access the HR management features
  
  @login @negative
  Scenario: Login with invalid credentials
	Given I am on the OrangeHRM login page
	When I enter invalid username ""InvalidUser"" and password ""InvalidPass""
	And I click the login button
	Then I should see an error message", global::Io.Cucumber.Messages.Types.SourceMediaType.TEXT_X_CUCUMBER_GHERKIN_PLAIN);
        }
        
        private static global::Io.Cucumber.Messages.Types.GherkinDocument GherkinDocumentFunc()
        {
            return new global::Io.Cucumber.Messages.Types.GherkinDocument("Features/OrangeLogin.feature", new global::Io.Cucumber.Messages.Types.Feature(new global::Io.Cucumber.Messages.Types.Location(1, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "en-US", "Feature", "Login feature", "  As a user of OrangeHRM system\r\n  I want to be able to login to the application\r" +
                        "\n  So that I can access the HR management features", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.FeatureChild>(new global::Io.Cucumber.Messages.Types.FeatureChild[] {
                                new global::Io.Cucumber.Messages.Types.FeatureChild(null, null, new global::Io.Cucumber.Messages.Types.Scenario(new global::Io.Cucumber.Messages.Types.Location(7, new System.Nullable<long>(3)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[] {
                                                    new global::Io.Cucumber.Messages.Types.Tag(new global::Io.Cucumber.Messages.Types.Location(6, new System.Nullable<long>(3)), "@login", "0e86d5da002bfe5a86c3fc5dba8d8672"),
                                                    new global::Io.Cucumber.Messages.Types.Tag(new global::Io.Cucumber.Messages.Types.Location(6, new System.Nullable<long>(10)), "@negative", "c5453332a1e1f35aa96633f1e097a380")}), "Scenario", "Login with invalid credentials", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Step>(new global::Io.Cucumber.Messages.Types.Step[] {
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(8, new System.Nullable<long>(2)), "Given ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONTEXT, "I am on the OrangeHRM login page", null, null, "2dcb2f254eefca54b51339472214b76a"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(9, new System.Nullable<long>(2)), "When ", global::Io.Cucumber.Messages.Types.StepKeywordType.ACTION, "I enter invalid username \"InvalidUser\" and password \"InvalidPass\"", null, null, "edaf7cd43d2e505798a123a015d4a3f6"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(10, new System.Nullable<long>(2)), "And ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONJUNCTION, "I click the login button", null, null, "42b978c3fc418b5ea242388a138504be"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(11, new System.Nullable<long>(2)), "Then ", global::Io.Cucumber.Messages.Types.StepKeywordType.OUTCOME, "I should see an error message", null, null, "701e83f581e2635eb913c408578eebc4")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Examples>(new global::Io.Cucumber.Messages.Types.Examples[0]), "e0a7214e83ebdc5d94e8a531bbecd61b"))})), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Comment>(new global::Io.Cucumber.Messages.Types.Comment[0]));
        }
        
        private static global::System.Collections.Generic.IEnumerable<Io.Cucumber.Messages.Types.Pickle> PicklesFunc()
        {
            return new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Pickle>(new global::Io.Cucumber.Messages.Types.Pickle[] {
                        new global::Io.Cucumber.Messages.Types.Pickle("733f2729f605e75cbad85f74120d6f40", "Features/OrangeLogin.feature", "Login with invalid credentials", "en-US", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleStep>(new global::Io.Cucumber.Messages.Types.PickleStep[] {
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "2dcb2f254eefca54b51339472214b76a"}), "08fa5fdf7c881354b9c79e76eb58fc0b", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "I am on the OrangeHRM login page"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "edaf7cd43d2e505798a123a015d4a3f6"}), "0dcd9bf5e474a85e8062254c36c3c5fb", global::Io.Cucumber.Messages.Types.PickleStepType.ACTION, "I enter invalid username \"InvalidUser\" and password \"InvalidPass\""),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "42b978c3fc418b5ea242388a138504be"}), "c9f16b1b7123215291341048da48f6e4", global::Io.Cucumber.Messages.Types.PickleStepType.ACTION, "I click the login button"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "701e83f581e2635eb913c408578eebc4"}), "ebabfc0d8b168954b6da5c81533f89dd", global::Io.Cucumber.Messages.Types.PickleStepType.OUTCOME, "I should see an error message")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTag>(new global::Io.Cucumber.Messages.Types.PickleTag[] {
                                        new global::Io.Cucumber.Messages.Types.PickleTag("@login", "0e86d5da002bfe5a86c3fc5dba8d8672"),
                                        new global::Io.Cucumber.Messages.Types.PickleTag("@negative", "c5453332a1e1f35aa96633f1e097a380")}), new System.Collections.Generic.List<string>(new string[] {
                                        "e0a7214e83ebdc5d94e8a531bbecd61b"}))});
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages(new global::System.Func<Io.Cucumber.Messages.Types.Source>(LoginFeatureFeature.SourceFunc), new global::System.Func<Io.Cucumber.Messages.Types.GherkinDocument>(LoginFeatureFeature.GherkinDocumentFunc), new global::System.Func<System.Collections.Generic.IEnumerable<Io.Cucumber.Messages.Types.Pickle>>(LoginFeatureFeature.PicklesFunc));
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("Login with invalid credentials")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Login with invalid credentials")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Login feature")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("login")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("negative")]
        public async global::System.Threading.Tasks.Task LoginWithInvalidCredentials()
        {
            string[] tagsOfScenario = new string[] {
                    "login",
                    "negative"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Login with invalid credentials", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 7
  this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("I am on the OrangeHRM login page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync("I enter invalid username \"InvalidUser\" and password \"InvalidPass\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
 await testRunner.AndAsync("I click the login button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.ThenAsync("I should see an error message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
